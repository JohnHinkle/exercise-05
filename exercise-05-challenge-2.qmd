---
title: "exercise-05-challenge-2"
author: "John Hinkle"
format: html
self-contained: true
editor: visual
---

## Exercise 05, Challenge 2

## Step 1: Load data

```{r}
library(tidyverse)
z <- read.csv("https://raw.githubusercontent.com/difiore/ada-datasets/main/zombies.csv")
```

## Step 2: Calculate the population mean and standard deviation for each quantitative random variable

```{r}
pop_sd <- function(x){
  sqrt(sum((x - mean(x))^2) / length(x))
}



print(z_summary <- 
        z |> 
        select(-id) |>
  summarize(across(where(is.numeric), list( 
    mean = ~mean(.), 
    sd = ~pop_sd(.)
    ), .names = "{.col}_{.fn}")))
```

## Step 3: Create box plots of quantitative random variables by gender

```{r}
library(ggplot2)

# Height
height_boxplot <- ggplot(z, aes(x=gender, y=height)) +
  geom_boxplot(color = "#BF5700")
height_boxplot

# Weight
weight_boxplot <- ggplot(z, aes(x=gender, y=weight)) +
  geom_boxplot(color = "#BF5700")
weight_boxplot

# Zombies killed
kills_boxplot <- ggplot(z, aes(x=gender, y=zombies_killed)) +
  geom_boxplot(color = "#BF5700")
kills_boxplot

# Education
education_boxplot <- ggplot(z, aes(x=gender, y=years_of_education)) +
  geom_boxplot(color = "#BF5700")
education_boxplot

# Age
age_boxplot <- ggplot(z, aes(x=gender, y=age)) +
  geom_boxplot(color = "#BF5700")
age_boxplot

```

## Step 4: Scatter plots of height and weight vs. age

It appears that there is a positive relationship between height vs. age, and weight vs. age. As you get older, you get taller and heavier. It is worth noting that the age axis only goes from 10 years old to 30 years old.

```{r}

# Height
print(height_scatter <- ggplot(z, aes(x= age, y=height, color=gender)) +
  geom_point())

# Weight
print(weight_scatter <- ggplot(z, aes(x= age, y=weight, color=gender)) +
  geom_point())
```

## Step 5a: Histograms of each random quantitative variable

'zombies_killed' and 'years_of_education' both appear to have non-normal distributions.

```{r}
# Height
hist(z$height)
# Weight
hist(z$weight)

# Zombies killed
hist(z$zombies_killed)

# Years of education
hist(z$years_of_education)

# Age
hist(z$age)
```

## Step 5b: Q-Q plots of each random quantitative variable

As with the histograms, 'zombies_killed' and 'years_of_education' both appear to have non-normal distributions.

```{r}
# Height
qqnorm(z$height, main="Height")
qqline(z$height, col = "#bf5700")

# Weight
qqnorm(z$weight, main="Weight")
qqline(z$weight, col = "#bf5700")

# Zombies killed
qqnorm(z$zombies_killed, main="Zombies Killed")
qqline(z$zombies_killed, col = "#bf5700")

# Years of education
qqnorm(z$years_of_education, main="Years of Education")
qqline(z$years_of_education, col = "#bf5700")

# Age
qqnorm(z$age, main="Age")
qqline(z$age, col = "#bf5700")
```

## Step 6: Sample one subset of 50 survivors, calculate summary statistics and CIs for each quantitative random variable

```{r}
z_sample <- slice_sample(z, n=50)

# summary stats df
print(z_sample_summary <- 
        z_sample |> 
        select(-id) |>
  summarize(across(where(is.numeric), list( 
    mean = ~mean(.), 
    sd = ~sd(.),
    se = ~sd(.)/sqrt(length(.))
    ), .names = "{.col}_{.fn}")))

# 95% CI for height
height_ci <- z_sample_summary$height_mean + qnorm(p=c(0.025, 0.975))*z_sample_summary$height_se
cat("95% CI for height:", height_ci, "\n")

# 95% CI for weight
weight_ci <- z_sample_summary$weight_mean + qnorm(p=c(0.025, 0.975))*z_sample_summary$weight_se
cat("95% CI for weight:", weight_ci, "\n")

# 95% CI for zombies killed
kills_ci <- z_sample_summary$zombies_killed_mean + qnorm(p=c(0.025, 0.975))*z_sample_summary$zombies_killed_se
cat("95% CI for zombies killed:", kills_ci, "\n")

# 95% CI for years of education
education_ci <- z_sample_summary$years_of_education_mean + qnorm(p=c(0.025, 0.975))*z_sample_summary$years_of_education_se
cat("95% CI for years of education:", education_ci, "\n")

# # 95% CI for age
age_ci <- z_sample_summary$age_mean + qnorm(p=c(0.025, 0.975))*z_sample_summary$age_se
cat("95% CI for age:", age_ci)
```

## Step 7: Create a sampling distribution and calculate summary statistics for it.

The means and standard deviations of the sampling distribution are similar to that of the single sample.

```{r}
reps <- 199
zquant <- z[, sapply(z, is.numeric)] |> 
  select(-id)

sample_means <- matrix(NA, nrow = reps, ncol = ncol(zquant))

for (i in 1:reps) {
  sample_data <- zquant[sample(1:nrow(zquant), 50), ]
  sample_means[i, ] <- colMeans(sample_data)
}

sample_means <- as.data.frame(sample_means)
colnames(sample_means) <- c("height_mean", "weight_mean", "zombies_killed_mean", "years_of_education_mean", "age_mean")

# Create a df containing the means from the initial, single sample
single_sample <-data.frame(
  height_mean = z_sample_summary$height_mean,
  weight_mean = z_sample_summary$weight_mean,
  zombies_killed_mean = z_sample_summary$zombies_killed_mean,
  years_of_education_mean = z_sample_summary$years_of_education_mean,
  age_mean = z_sample_summary$age_mean
)

# Add that initial sample to the other 199
sample_means <- rbind(sample_means, single_sample)

# Get the mean and standard deviation for each variable
print(sampling_distribution_summary_stats <- data.frame(
  mean = colMeans(sample_means),
  sd = apply(sample_means, 2, sd)
))
```

## Step 8a: Histograms for the sampling distribution

Based on the histograms, all of the variables appear to have roughly normally distributed sampling distributions. This includes the 'zombies_killed' and 'years_of_education' variables which previosuly did not have normal distributions.

```{r}
# Height mean
hist(sample_means$height_mean)

# Weight mean
hist(sample_means$weight_mean)

# Zombies killed mean
hist(sample_means$zombies_killed_mean)

# Years of education mean
hist(sample_means$years_of_education_mean)

# Age mean
hist(sample_means$age_mean)
```

## Step 8b: Q-Q plots for the sampling distribution

As with the histograms, all of the variables appear to have roughly normally distributed sampling distributions. This includes the 'zombies_killed' and 'years_of_education' variables which previously did not have normal distributions.

```{r}
# Height
qqnorm(sample_means$height_mean, main="Height mean")
qqline(sample_means$height_mean, col = "#bf5700")

# Weight
qqnorm(sample_means$weight_mean, main="Weight mean")
qqline(sample_means$weight_mean, col = "#bf5700")

# Zombies killed
qqnorm(sample_means$zombies_killed_mean, main="Zombies Killed mean")
qqline(sample_means$zombies_killed_mean, col = "#bf5700")

# Years of education
qqnorm(sample_means$years_of_education_mean, main="Years of Education mean")
qqline(sample_means$years_of_education_mean, col = "#bf5700")

# Age
qqnorm(sample_means$age_mean, main="Age mean")
qqline(sample_means$age_mean, col = "#bf5700")
```

## Step 9: Confidence Intervals of Sampling Distribution

```{r}
# Height
quantile(sample_means$height_mean, c(0.025, 0.975))

# Weight
quantile(sample_means$weight_mean, c(0.025, 0.975))

# Zombies killed
quantile(sample_means$zombies_killed_mean, c(0.025, 0.975))

# Years of education
quantile(sample_means$years_of_education_mean, c(0.025, 0.975))

# Age
quantile(sample_means$age_mean, probs = c(0.025, 0.975))
```

## Step 10: Bootstrapping

The confidence intervals generated by bootstrapping are "narrower" than the confidence intervals generated in Step 9.

```{r}
n_boot=1000
n <- length(sample_means$height_mean)


boot <- vector()
for (i in 1:n_boot){
  boot[[i]] <- mean(sample(sample_means$height_mean, n, replace = TRUE))
}
quantile(probs = c(0.025, 0.975),boot)

boot <- vector()
for (i in 1:n_boot){
  boot[[i]] <- mean(sample(sample_means$weight_mean, n, replace = TRUE))
}
quantile(probs = c(0.025, 0.975),boot)

boot <- vector()
for (i in 1:n_boot){
  boot[[i]] <- mean(sample(sample_means$zombies_killed_mean, n, replace = TRUE))
}
quantile(probs = c(0.025, 0.975),boot)

boot <- vector()
for (i in 1:n_boot){
  boot[[i]] <- mean(sample(sample_means$years_of_education_mean, n, replace = TRUE))
}
quantile(probs = c(0.025, 0.975),boot)

n_boot <- 1000
boot <- vector()
for (i in 1:n_boot){
  boot[[i]] <- mean(sample(sample_means$age_mean, n, replace = TRUE))
}
quantile(probs = c(0.025, 0.975),boot)
```
